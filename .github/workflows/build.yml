---
name: Build

on:
  workflow_dispatch: 
    inputs: 
      repo: 
        description: "Build desired repo"
        required: false
        type: string
      app_id: 
        required: true
        type: string
      webhook_secret_token: 
        required: true
        type: string
      private_key: 
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
        matrix:
          node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    - name: "Clone user's repo"
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.repository.full_name }} # on every repo we need to update env variables
        ref: ${{ github.event.ref }}
    - uses: pnpm/action-setup@0609f0983b7a228f052f81ef4c3d6510cae254ad
      with:
        version: 6.10.0
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: Install Dependencies
      run: pnpm i # we need to update user's application command

    - name: Build
      run: pnpm build > build.log # we need to update user's application command
      env:
        APP_ID: ${{ inputs.app_id }}
        WEBHOOK_SECRET_TOKEN: ${{ inputs.webhook_secret_token }}
        PRIVATE_KEY: ${{ inputs.private_key }}

    - name: Upload build logs
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: build.log

  send_build_logs:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download build logs
        uses: actions/download-artifact@v3
        with:
          name: build-logs
      - name: Send data to web app
        run: |
          node -e "const fetch = require('node-fetch');
          const fs = require('fs/promises')
          const path = require('path')
          
          const buildId = Date.now();
          const status = 'success';
          const logsPath = path.resolve(__dirname, "build.log");
          
          
          async function main() {
            const logs = await fs.readFile(logsPath, "utf8")
            
            const payload = {
              build_id: buildId,
              status: status,
              logs: logs
            };
            
            try {
              const response = await fetch('https://7911-201-229-230-132.ngrok-free.app/api/build', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
          })
              console.log("succeed")
            } catch(err) {
              console.error(err);
            } finally {
              console.log("Process finish")
            }
          }
          
          main()"

...