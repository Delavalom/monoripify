---
name: Build

on:
  workflow_dispatch: 
    inputs: 
      installation_id:
        description: "Installation ID required for build"
        type: string
      repo_fullname: 
        description: "Repo full name"
        required: true
        type: string
      envs: 
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
        matrix:
          node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    - name: "Clone user's repo"
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repo_fullname }} # on every repo we need to update env variables
        ref: ${{ github.event.ref }}
    - uses: pnpm/action-setup@0609f0983b7a228f052f81ef4c3d6510cae254ad
      with:
        version: 6.10.0
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: Install Dependencies
      run: pnpm i # we need to update user's application command

    - name: Build
      run: ${{ inputs.envs }} pnpm build > build.log # we need to update user's application command

    - name: Send data to web app
      run:  touch script.mjs && echo 'import s from"fs/promises";import i from"path";let buildId=Date.now(),status="success",logsPath=i.join(i.resolve(),"build.log");async function main(){let i=await s.readFile(logsPath,"utf8");try{await fetch("https://86d2-148-101-169-228.ngrok-free.app/api/logs",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({build_id:buildId,status:"success",logs:i})}),console.log("succeed")}catch(t){console.error(t)}finally{console.log("Process finish")}}main();' > script.mjs && node script.mjs --experimental-fetch

...